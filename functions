# Create a new directory and enter it.
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# Start a PHP server from a directory, optionally specifying the port.
function serve() {
    local port="${1:-4000}"
    local ip=0.0.0.0
    sleep 1 && open "http://${ip}:${port}/" &
    php -S "${ip}:${port}"
}

# Backup file, appending date_time to created file.
function bk() {
    filename=$1
    filetime=$(date +%Y%m%d_%H%M%S)
    cp ${filename} ${filename}_${filetime}
}

# Returns the HTTP Heades of web address.
function headers() {
    curl -sv "$@" 2>&1 >/dev/null | grep -v "^\*" | grep -v "^}" | cut -c3-
}

# Compiles and runs the Java source file.
function javar() {
    DIR=`dirname $1`
    clear && javac $1 && java `echo $1 | cut -d '.' -f 1`
    rm -fv $DIR/*.class
}

# Recursively locate and destroy all vagrant instances.
function vagrant-destroy-all() {
    DIR=${1:-$(pwd)}
    find $DIR \
        -type d \
        -name .vagrant \
        -exec sh -c '(cd $(dirname {}) && pwd && vagrant destroy -f)' \;
}

# Recursively locate and suspend all vagrant instances.
function vagrant-suspend-all() {
    DIR=${1:-$(pwd)}
    find $DIR \
        -type d \
        -name .vagrant \
        -exec sh -c '(cd $(dirname {}) && pwd && vagrant suspend)' \;
}

# Rip all YouTube channel videos
function yt-chanrip() {
    for i in $(curl -s http://gdata.youtube.com/feeds/api/users/"$1"/uploads | \
        grep -Eo "watch\?v=[^[:space:]\"\'\\]{11}" | uniq); \
            do youtube-dl --title --no-overwrites http://youtube.com/"$i"; done
}

# Remove local branches that are merged in current branch
function git-remove-merged-branches() {
    local current_branch=$(git rev-parse --abbrev-ref HEAD)
    for branch in $(git branch --merged | grep -v "\*" | cut -c3-)
    do
        echo "Branch $branch is already merged into $current_branch."
        echo "Would you like to delete it? [Y]es/[N]o "
        read REPLY
        if [[ $REPLY =~ ^[Yy] ]]; then
            git branch -d $branch
        fi
    done
}